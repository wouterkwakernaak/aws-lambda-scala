import java.io.{InputStream, OutputStream}

import com.amazonaws.auth.profile.ProfileCredentialsProvider
import com.amazonaws.regions.{Region, Regions}
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient
import com.amazonaws.services.dynamodbv2.datamodeling._
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.scala.DefaultScalaModule

class TodoApp {

  val client = new AmazonDynamoDBClient(new ProfileCredentialsProvider())
  client.setRegion(Region.getRegion(Regions.EU_WEST_1))

  val scalaMapper = new ObjectMapper()
  scalaMapper.registerModule(DefaultScalaModule)

  def createItem(input: InputStream) = {
    val item = scalaMapper.readValue(input, classOf[TodoItem])
    val dynamoMapper = new DynamoDBMapper(client)
    val todoItemDbObj = new TodoItemDbObj()
    todoItemDbObj.setDescription(item.description)
    dynamoMapper.save(todoItemDbObj)
  }

  def readAllItems(output: OutputStream) = ???

  def readItem(id: Int): TodoItem = ???

  def updateItem(item: TodoItem) = ???

  def deleteItem(item: TodoItem) = ???

  case class TodoItem(id: Option[String], description: String)

  @DynamoDBTable(tableName = "TodoItems")
  class TodoItemDbObj {

    private var id : String = _
    private var description : String = _

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    def getId() = id
    def setId(_id: String) = id = _id

    @DynamoDBAttribute(attributeName="description")
    def getDescription() = description
    def setDescription(_description: String) = description = _description

  }

}




